#include <iostream>
#include <vector>
#include <limits>

using namespace std;

const double INF = numeric_limits<double>::infinity();

void imprimirCamino(int destino, const vector<int>& padre) {
    if (padre[destino] == -1) {
        cout << destino;
        return;
    }
    imprimirCamino(padre[destino], padre);
    cout << " -> " << destino;
}

void dijkstra(int n, int origen, int destino, vector<vector<pair<int, double>>> &grafo) {
    vector<double> distancia(n, INF);
    vector<bool> visitado(n, false);
    vector<int> padre(n, -1);

    distancia[origen] = 0.0;

    for (int i = 0; i < n - 1; i++) {
        int u = -1;
        for (int j = 0; j < n; j++) {
            if (!visitado[j] && (u == -1 || distancia[j] < distancia[u])) {
                u = j;
            }
        }

        if (u == -1) break;

        visitado[u] = true;

        for (auto vecino : grafo[u]) {
            int v = vecino.first;
            double peso = vecino.second;

            if (distancia[u] + peso < distancia[v]) {
                distancia[v] = distancia[u] + peso;
                padre[v] = u;
            }
        }
    }

    cout << "Distancias y caminos desde el nodo " << origen <<" hasta "<< destino << endl;
    if (distancia[destino] == INF) {
        cout << "Nodo " << destino << ": Inalcanzable" << endl;
    } else {
        cout << "Nodo " << destino << ": Distancia = " << distancia[destino] << ", Camino: ";
        imprimirCamino(destino, padre);
        cout << endl;
    }
}

int main() {
    int tipGraf, n, m, origen, destino;

    cout << "Seleccione tipo de grafo: "<<endl<<"1. No dirigido."<<endl<<"2. Dirigido."<<endl;
    cin >> tipGraf;
    cout << "Cantidad de nodos: "; cin >> n;
    cout << "Cantidad de aristas: "; cin >> m;

    vector<vector<pair<int, double>>> grafo(n);

    cout << "Ingrese las aristas (formato: origen destino peso):" << endl;
    for (int i = 0; i < m; i++) {
        int u, v;
        double w;
        cin >> u >> v >> w;
        if (tipGraf == 1) {
            grafo[u].push_back({v, w});
            grafo[v].push_back({u, w});
        }
        else if (tipGraf == 2) {
            grafo[u].push_back({v, w});
        }
        else {
            cout<<"Grafo no determinado";
        }
    }

    cout << "Nodo origen: "; cin >> origen;
    cout << "Nodo destino: "; cin >> destino;
    dijkstra(n, origen, destino, grafo);

    return 0;
}

